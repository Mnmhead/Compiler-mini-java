/*
 * CUP specification for the parser for a simple demo language.
 * Change this into the parser for your implementation of MiniJava.
 * CSE 401/P501 Au11.
 */

package Parser;

import AST.*;
import java.util.*;
import java_cup.runtime.*;
import errorHandle.ParserErrorHandler;

/* Code in the following section is included in the generated parser */

parser code {:
  /* Override default error message routine to handle line numbers correctly */
  /* This routine is also called in the process of handling fatal errors. */

  /** Report a non fatal error (or warning).  This method takes a message 
   *  string and an additional object (to be used by specializations 
   *  implemented in subclasses).  Prints the same simple error message
   *  as the base class version, but correctly labels the line number.
   *
   * @param message an error message.
   * @param info    an extra object reserved for use by specialized subclasses.
   */
  public void report_error(String message, Object info)
    {
      System.err.print(message);
      System.err.flush();
      if (info instanceof Symbol) {
         Symbol info_sym = (Symbol) info;

         if ( info_sym.left != -1 ) {
             System.err.println(" at line " + info_sym.left +
                                    " of input");
          } else {
            System.err.println("");
         }
      } else {
         System.err.println("");
      }

      ParserErrorHandler.handleParserError();
    }
:};

/* end of code included in generated parser


/* Terminals (tokens returned by the scanner) */

/* reserved words: */

terminal PUBLIC, MAIN, CLASS, EXTENDS, BOOLEANTYPE, IF, ELSE, WHILE, PRINTLN, LENGTH, INTTYPE, DOUBLETYPE, NEW, RETURN, THIS, TRUE, FALSE;

/* operators: */

terminal PLUS, BECOMES, AND, LT, MINUS, TIMES, BANG;

/* delimiters: */

terminal LPAREN, RPAREN, LBRACE, RBRACE, LFREEBRACE, RFREEBRACE, SEMICOLON, COMMA, PERIOD;

/* tokens with values: */

terminal String IDENTIFIER;
terminal String INTEGERLITERAL;
terminal String DOUBLELITERAL;

/* Nonterminals */

nonterminal Program Program;
nonterminal Statement Statement;
nonterminal Assign AssignStatement;
nonterminal Exp Expression;
nonterminal Identifier Identifier;
nonterminal Type Type;
nonterminal MainClass MainClass;
nonterminal ClassDecl ClassDecl;
nonterminal VarDecl VarDecl;
nonterminal VarDeclList VarDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal MethodDeclList MethodDeclList;
nonterminal FormalList FormalList;
nonterminal Formal Formal;
nonterminal StatementList StatementList;
nonterminal ArrayAssign ArrayAssign;
nonterminal ExpList ExpList;

/* Precedence declarations */

precedence left AND;
precedence nonassoc BANG;
precedence left LT;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left LBRACE;
precedence left PERIOD;

/* Productions */

Program ::= MainClass:mc
            {: ClassDeclList cdl = new ClassDeclList(mcleft);
               RESULT = new Program(mc, cdl, mcleft); :}
          | Program:p ClassDecl:cd
            {: p.cl.add( cd );
               RESULT = p; :};

MainClass ::= CLASS Identifier:id1 LFREEBRACE MAIN Identifier:id2 RPAREN LFREEBRACE
              Statement:s RFREEBRACE RFREEBRACE
              {: RESULT = new MainClass(id1, id2, s, id1left); :};

ClassDecl ::= CLASS Identifier:id LFREEBRACE VarDeclList:vdl MethodDeclList:mdl
              RFREEBRACE
              {: if (vdl == null) { vdl = new VarDeclList(idleft); }
                 if (mdl == null) { mdl = new MethodDeclList(idleft); }
                 RESULT = new ClassDeclSimple(id, vdl, mdl, idleft); :}
            | CLASS Identifier:id1 EXTENDS Identifier:id2 LFREEBRACE
              VarDeclList:vdl MethodDeclList:mdl RFREEBRACE
              {: if (vdl == null) { vdl = new VarDeclList(id1left); }
                 if (mdl == null) { mdl = new MethodDeclList(id1left); }
                 RESULT = new ClassDeclExtends(id1, id2, vdl, mdl, id1left); :};

VarDecl ::= Type:t Identifier:id SEMICOLON
            {: RESULT = new VarDecl(t, id, tleft); :};

VarDeclList ::= VarDeclList:vdl VarDecl:vd
                {: if( vdl == null ) { vdl = new VarDeclList(vdlleft); }
                   vdl.add(vd);
                   RESULT = vdl; :}
              | /* empty */
                {: RESULT = null; :};

MethodDeclList ::= MethodDeclList:mdl MethodDecl:m
                   {: if (mdl == null) { mdl = new MethodDeclList(mdlleft); }
                      mdl.add(m);
                      RESULT = mdl; :}
                 | /* empty */
                   {: RESULT = null; :};

MethodDecl ::= PUBLIC:p Type:t Identifier:id LPAREN RPAREN LFREEBRACE VarDeclList:vdl
               StatementList:sl RETURN Expression:e SEMICOLON RFREEBRACE
               {: if (vdl == null) { vdl = new VarDeclList(vdlleft); }
                  if (sl == null) { sl = new StatementList(slleft); }
                  RESULT = new MethodDecl(t, id, new FormalList(idleft), vdl,
                                          sl, e, pleft); :}
             | PUBLIC:p Type:t Identifier:id LPAREN FormalList:fl RPAREN
               LFREEBRACE VarDeclList:vdl StatementList:sl RETURN Expression:e
               SEMICOLON RFREEBRACE
               {: if (vdl == null) { vdl = new VarDeclList(vdlleft); }
                  if (sl == null) { sl = new StatementList(slleft); }
                  RESULT = new MethodDecl(t, id, fl, vdl, sl, e, pleft); :};

FormalList ::= Formal:f
               {: FormalList fl = new FormalList(fleft);
                  fl.add(f);
                  RESULT = fl; :}
             | FormalList:fl COMMA Formal:f
               {: fl.add(f);
                  RESULT = fl; :};



Formal ::= Type:t Identifier:id
           {: RESULT = new Formal(t, id, tleft); :};

StatementList ::= /* empty */
                  {: RESULT = null; :}
                | Statement:s StatementList:sl
                  {: if (sl == null) { sl = new StatementList(sleft); }
                     sl.addToFront(s);
                     RESULT = sl; :};


ExpList ::= Expression:e
            {: ExpList el = new ExpList(eleft);
               el.add(e);
               RESULT = el; :}
          | ExpList:el COMMA Expression:e
            {: el.add(e);
               RESULT = el; :};

Type ::= INTTYPE:i
         {: RESULT = new IntegerType( ileft ); :}
       | BOOLEANTYPE:b
         {: RESULT = new BooleanType( bleft ); :}
       | DOUBLETYPE:d
         {: RESULT = new DoubleType( dleft ); :}
       | INTTYPE:i LBRACE RBRACE
         {: RESULT = new IntArrayType( ileft ); :}
       | Identifier:id
         {: RESULT = new IdentifierType( id.toString(), idleft ); :};

Statement ::= LFREEBRACE:lfb StatementList:sl RFREEBRACE
              {: if (sl == null) { sl = new StatementList(lfbleft); }
                 RESULT = new Block(sl, lfbleft); :}
            | IF LPAREN Expression:e RPAREN Statement:s1 ELSE Statement:s2
              {: RESULT = new If(e, s1, s2, eleft); :}
            | WHILE LPAREN Expression:e RPAREN Statement:s
              {: RESULT = new While(e, s, eleft); :}
            | PRINTLN LPAREN Expression:e RPAREN SEMICOLON
              {: RESULT = new Print(e, eleft); :}
            | AssignStatement:s
              {: RESULT = s; :}
            | ArrayAssign:ass
              {: RESULT = ass; :};

AssignStatement ::= Identifier:id BECOMES Expression:expr SEMICOLON
                    {: RESULT = new Assign(id, expr, idleft); :};

ArrayAssign ::= Identifier:id LBRACE Expression:e1 RBRACE BECOMES Expression:e2
                SEMICOLON
                {: RESULT = new ArrayAssign(id, e1, e2, idleft); :};


Identifier ::= IDENTIFIER:id
               {: RESULT = new Identifier(id, idleft); :};

Expression ::= Expression:e1 LBRACE Expression:e2 RBRACE
               {: RESULT = new ArrayLookup(e1, e2, e1left); :}
             | Expression:arg1 PLUS Expression:arg2
               {: RESULT = new Plus(arg1, arg2, arg1left); :}
             | Expression:arg1 MINUS Expression:arg2
               {: RESULT = new Minus(arg1, arg2, arg1left); :}
             | Expression:arg1 TIMES Expression:arg2
               {: RESULT = new Times(arg1, arg2, arg1left); :}
             | Expression:arg1 AND Expression:arg2
               {: RESULT = new And(arg1, arg2, arg1left); :}
             | Expression:arg1 LT Expression:arg2
               {: RESULT = new LessThan(arg1, arg2, arg1left); :}
             | Expression:e PERIOD LENGTH
               {: RESULT = new ArrayLength(e, eleft); :}
             | LPAREN Expression:expr RPAREN
               {: RESULT = expr; :}
             | INTEGERLITERAL:i
               {: int n = Integer.parseInt(i);
               RESULT = new IntegerLiteral(n, ileft); :}
             | DOUBLELITERAL:d
               {: double x = Double.parseDouble(d);
                  RESULT = new DoubleLiteral(x, dleft); :}
             | TRUE:t
               {: RESULT = new True(tleft); :}
             | FALSE:f
               {: RESULT = new False(fleft); :}
             | IDENTIFIER:name
               {: RESULT = new IdentifierExp(name, nameleft); :}
             | THIS:t
               {: RESULT = new This(tleft); :}
             | NEW INTTYPE LBRACE Expression:e RBRACE
               {: RESULT = new NewArray(e, eleft); :}
             | NEW Identifier:id LPAREN RPAREN
               {: RESULT = new NewObject(id, idleft); :}
             | BANG Expression:e
               {: RESULT = new Not(e, eleft); :}
             | Expression:e PERIOD Identifier:id LPAREN RPAREN
               {: RESULT = new Call(e, id, new ExpList(eleft), eleft); :}
             | Expression:e PERIOD Identifier:id LPAREN ExpList:el RPAREN
               {: RESULT = new Call(e, id, el, eleft); :};
